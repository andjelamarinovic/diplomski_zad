// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportApp.Models;

namespace SportApp.Migrations
{
    [DbContext(typeof(SportAppContext))]
    partial class SportAppContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SportApp.Models.Norma", b =>
                {
                    b.Property<int>("NormaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Ocjena1")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Ocjena2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Ocjena3")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Ocjena4")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Ocjena5")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RazredId");

                    b.Property<int>("SpolId");

                    b.Property<int>("VrstaTestaId");

                    b.HasKey("NormaId");

                    b.HasIndex("RazredId");

                    b.HasIndex("SpolId");

                    b.HasIndex("VrstaTestaId");

                    b.ToTable("Norma");
                });

            modelBuilder.Entity("SportApp.Models.OcjeneSporta", b =>
                {
                    b.Property<int>("OcjenaSportaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Ocjena");

                    b.Property<int>("SportId");

                    b.Property<int>("TestiranjeId");

                    b.HasKey("OcjenaSportaId");

                    b.HasIndex("SportId");

                    b.HasIndex("TestiranjeId");

                    b.ToTable("OcjeneSporta");
                });

            modelBuilder.Entity("SportApp.Models.Razred", b =>
                {
                    b.Property<int>("RazredId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrojRazred");

                    b.Property<string>("Opis")
                        .IsRequired();

                    b.HasKey("RazredId");

                    b.ToTable("Razred");
                });

            modelBuilder.Entity("SportApp.Models.Spol", b =>
                {
                    b.Property<int>("SpolId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NazivSpola")
                        .IsRequired();

                    b.HasKey("SpolId");

                    b.ToTable("Spol");
                });

            modelBuilder.Entity("SportApp.Models.Sportovi", b =>
                {
                    b.Property<int>("SportId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive");

                    b.Property<string>("SportIme");

                    b.HasKey("SportId");

                    b.ToTable("Sportovi");
                });

            modelBuilder.Entity("SportApp.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("GodinaMajka")
                        .HasColumnType("date");

                    b.Property<DateTime?>("GodinaOtac")
                        .HasColumnType("date");

                    b.Property<string>("Ime");

                    b.Property<string>("Istovremeno");

                    b.Property<string>("KojiSportMajka");

                    b.Property<string>("KojiSportOtac");

                    b.Property<string>("KojiSportStudent");

                    b.Property<string>("Prezime");

                    b.Property<int?>("SifraStudent");

                    b.Property<int>("SpolId");

                    b.Property<string>("SportMajka");

                    b.Property<string>("SportOtac");

                    b.Property<string>("SportStudent");

                    b.Property<DateTime?>("StudentDatum")
                        .HasColumnType("date");

                    b.Property<string>("StudentMjesto");

                    b.Property<int?>("Trajanje");

                    b.HasKey("StudentId");

                    b.HasIndex("SpolId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SportApp.Models.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NormaId");

                    b.Property<decimal?>("Ocjena")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("TestRezultat")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<int>("TestiranjeId");

                    b.Property<int>("VrstaTestaId");

                    b.HasKey("TestId");

                    b.HasIndex("NormaId");

                    b.HasIndex("TestiranjeId");

                    b.HasIndex("VrstaTestaId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("SportApp.Models.Testiranje", b =>
                {
                    b.Property<int>("TestiranjeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DatumTest")
                        .HasColumnType("date");

                    b.Property<int>("RazredId");

                    b.Property<int>("StudentId");

                    b.HasKey("TestiranjeId");

                    b.HasIndex("RazredId");

                    b.HasIndex("StudentId");

                    b.ToTable("Testiranje");
                });

            modelBuilder.Entity("SportApp.Models.VrstaTesta", b =>
                {
                    b.Property<int>("VrstaTestaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive");

                    b.Property<string>("NazivTesta");

                    b.HasKey("VrstaTestaId");

                    b.ToTable("VrstaTesta");
                });

            modelBuilder.Entity("SportApp.Models.Norma", b =>
                {
                    b.HasOne("SportApp.Models.Razred", "Razred")
                        .WithMany("Norma")
                        .HasForeignKey("RazredId")
                        .HasConstraintName("FK_Norme_Razred_RazredId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportApp.Models.Spol", "Spol")
                        .WithMany("Norma")
                        .HasForeignKey("SpolId")
                        .HasConstraintName("FK_Norme_Spol_SpolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportApp.Models.VrstaTesta", "VrstaTesta")
                        .WithMany("Norma")
                        .HasForeignKey("VrstaTestaId")
                        .HasConstraintName("FK_Norme_VrstaTesta_VrstaTestaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportApp.Models.OcjeneSporta", b =>
                {
                    b.HasOne("SportApp.Models.Sportovi", "Sport")
                        .WithMany("OcjeneSporta")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportApp.Models.Testiranje", "Testiranje")
                        .WithMany("OcjeneSporta")
                        .HasForeignKey("TestiranjeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportApp.Models.Student", b =>
                {
                    b.HasOne("SportApp.Models.Spol", "Spol")
                        .WithMany("Student")
                        .HasForeignKey("SpolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportApp.Models.Test", b =>
                {
                    b.HasOne("SportApp.Models.Norma", "Norma")
                        .WithMany("Test")
                        .HasForeignKey("NormaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportApp.Models.Testiranje", "Testiranje")
                        .WithMany("Test")
                        .HasForeignKey("TestiranjeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportApp.Models.VrstaTesta", "VrstaTesta")
                        .WithMany("Test")
                        .HasForeignKey("VrstaTestaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SportApp.Models.Testiranje", b =>
                {
                    b.HasOne("SportApp.Models.Razred", "Razred")
                        .WithMany("Testiranje")
                        .HasForeignKey("RazredId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SportApp.Models.Student", "Student")
                        .WithMany("Testiranje")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
